/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: uaa-connector/client.go

package uaa_connector

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of UaaApi interface
type MockUaaApi struct {
	ctrl     *gomock.Controller
	recorder *_MockUaaApiRecorder
}

// Recorder for MockUaaApi (not exported)
type _MockUaaApiRecorder struct {
	mock *MockUaaApi
}

func NewMockUaaApi(ctrl *gomock.Controller) *MockUaaApi {
	mock := &MockUaaApi{ctrl: ctrl}
	mock.recorder = &_MockUaaApiRecorder{mock}
	return mock
}

func (_m *MockUaaApi) EXPECT() *_MockUaaApiRecorder {
	return _m.recorder
}

func (_m *MockUaaApi) Login(username string, password string) (*LoginResponse, int, error) {
	ret := _m.ctrl.Call(_m, "Login", username, password)
	ret0, _ := ret[0].(*LoginResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUaaApiRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Login", arg0, arg1)
}

func (_m *MockUaaApi) ValidateOauth2Token(token string) (*TapJWTToken, error) {
	ret := _m.ctrl.Call(_m, "ValidateOauth2Token", token)
	ret0, _ := ret[0].(*TapJWTToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUaaApiRecorder) ValidateOauth2Token(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ValidateOauth2Token", arg0)
}
