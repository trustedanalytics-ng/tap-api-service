/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/trustedanalytics-ng/tap-container-broker/client/client_api.go

package api

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/trustedanalytics-ng/tap-container-broker/models"
	api "k8s.io/kubernetes/pkg/api"
)

// Mock of TapContainerBrokerApi interface
type MockTapContainerBrokerApi struct {
	ctrl     *gomock.Controller
	recorder *_MockTapContainerBrokerApiRecorder
}

// Recorder for MockTapContainerBrokerApi (not exported)
type _MockTapContainerBrokerApiRecorder struct {
	mock *MockTapContainerBrokerApi
}

func NewMockTapContainerBrokerApi(ctrl *gomock.Controller) *MockTapContainerBrokerApi {
	mock := &MockTapContainerBrokerApi{ctrl: ctrl}
	mock.recorder = &_MockTapContainerBrokerApiRecorder{mock}
	return mock
}

func (_m *MockTapContainerBrokerApi) EXPECT() *_MockTapContainerBrokerApiRecorder {
	return _m.recorder
}

func (_m *MockTapContainerBrokerApi) BindInstance(srcInstanceId string, dstInstanceId string) (models.MessageResponse, int, error) {
	ret := _m.ctrl.Call(_m, "BindInstance", srcInstanceId, dstInstanceId)
	ret0, _ := ret[0].(models.MessageResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) BindInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindInstance", arg0, arg1)
}

func (_m *MockTapContainerBrokerApi) UnbindInstance(srcInstanceId string, dstInstanceId string) (models.MessageResponse, int, error) {
	ret := _m.ctrl.Call(_m, "UnbindInstance", srcInstanceId, dstInstanceId)
	ret0, _ := ret[0].(models.MessageResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) UnbindInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnbindInstance", arg0, arg1)
}

func (_m *MockTapContainerBrokerApi) ExposeInstance(instanceId string, body models.ExposeRequest) ([]string, int, error) {
	ret := _m.ctrl.Call(_m, "ExposeInstance", instanceId, body)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) ExposeInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExposeInstance", arg0, arg1)
}

func (_m *MockTapContainerBrokerApi) UnexposeInstance(instanceId string) (int, error) {
	ret := _m.ctrl.Call(_m, "UnexposeInstance", instanceId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapContainerBrokerApiRecorder) UnexposeInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnexposeInstance", arg0)
}

func (_m *MockTapContainerBrokerApi) GetInstanceLogs(instanceId string) (map[string]string, int, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceLogs", instanceId)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetInstanceLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceLogs", arg0)
}

func (_m *MockTapContainerBrokerApi) GetContainerBrokerHealth() (int, error) {
	ret := _m.ctrl.Call(_m, "GetContainerBrokerHealth")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetContainerBrokerHealth() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContainerBrokerHealth")
}

func (_m *MockTapContainerBrokerApi) GetInstanceHosts(instanceId string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceHosts", instanceId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetInstanceHosts(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceHosts", arg0)
}

func (_m *MockTapContainerBrokerApi) GetCredentials(instanceId string) ([]models.ContainerCredenials, int, error) {
	ret := _m.ctrl.Call(_m, "GetCredentials", instanceId)
	ret0, _ := ret[0].([]models.ContainerCredenials)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetCredentials(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCredentials", arg0)
}

func (_m *MockTapContainerBrokerApi) GetConfigMap(configMapName string) (api.ConfigMap, int, error) {
	ret := _m.ctrl.Call(_m, "GetConfigMap", configMapName)
	ret0, _ := ret[0].(api.ConfigMap)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetConfigMap(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConfigMap", arg0)
}

func (_m *MockTapContainerBrokerApi) GetSecret(secretName string) (api.Secret, int, error) {
	ret := _m.ctrl.Call(_m, "GetSecret", secretName)
	ret0, _ := ret[0].(api.Secret)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecret", arg0)
}

func (_m *MockTapContainerBrokerApi) GetVersions() ([]models.VersionsResponse, int, error) {
	ret := _m.ctrl.Call(_m, "GetVersions")
	ret0, _ := ret[0].([]models.VersionsResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapContainerBrokerApiRecorder) GetVersions() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVersions")
}
