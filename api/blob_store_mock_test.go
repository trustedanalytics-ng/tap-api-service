/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/trustedanalytics-ng/tap-blob-store/client/client.go

package api

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	multipart "mime/multipart"
)

// Mock of TapBlobStoreApi interface
type MockTapBlobStoreApi struct {
	ctrl     *gomock.Controller
	recorder *_MockTapBlobStoreApiRecorder
}

// Recorder for MockTapBlobStoreApi (not exported)
type _MockTapBlobStoreApiRecorder struct {
	mock *MockTapBlobStoreApi
}

func NewMockTapBlobStoreApi(ctrl *gomock.Controller) *MockTapBlobStoreApi {
	mock := &MockTapBlobStoreApi{ctrl: ctrl}
	mock.recorder = &_MockTapBlobStoreApiRecorder{mock}
	return mock
}

func (_m *MockTapBlobStoreApi) EXPECT() *_MockTapBlobStoreApiRecorder {
	return _m.recorder
}

func (_m *MockTapBlobStoreApi) StoreBlob(blobID string, file multipart.File) error {
	ret := _m.ctrl.Call(_m, "StoreBlob", blobID, file)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapBlobStoreApiRecorder) StoreBlob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StoreBlob", arg0, arg1)
}

func (_m *MockTapBlobStoreApi) GetBlob(blobID string, dest io.Writer) error {
	ret := _m.ctrl.Call(_m, "GetBlob", blobID, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapBlobStoreApiRecorder) GetBlob(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlob", arg0, arg1)
}

func (_m *MockTapBlobStoreApi) DeleteBlob(blobID string) (int, error) {
	ret := _m.ctrl.Call(_m, "DeleteBlob", blobID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapBlobStoreApiRecorder) DeleteBlob(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBlob", arg0)
}
