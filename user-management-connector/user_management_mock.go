/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: user-management-connector/client.go

package user_management_connector

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of UserManagementFactory interface
type MockUserManagementFactory struct {
	ctrl     *gomock.Controller
	recorder *_MockUserManagementFactoryRecorder
}

// Recorder for MockUserManagementFactory (not exported)
type _MockUserManagementFactoryRecorder struct {
	mock *MockUserManagementFactory
}

func NewMockUserManagementFactory(ctrl *gomock.Controller) *MockUserManagementFactory {
	mock := &MockUserManagementFactory{ctrl: ctrl}
	mock.recorder = &_MockUserManagementFactoryRecorder{mock}
	return mock
}

func (_m *MockUserManagementFactory) EXPECT() *_MockUserManagementFactoryRecorder {
	return _m.recorder
}

func (_m *MockUserManagementFactory) GetConfiguredUserManagementConnector(authorization string) UserManagementApi {
	ret := _m.ctrl.Call(_m, "GetConfiguredUserManagementConnector", authorization)
	ret0, _ := ret[0].(UserManagementApi)
	return ret0
}

func (_mr *_MockUserManagementFactoryRecorder) GetConfiguredUserManagementConnector(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetConfiguredUserManagementConnector", arg0)
}

// Mock of UserManagementApi interface
type MockUserManagementApi struct {
	ctrl     *gomock.Controller
	recorder *_MockUserManagementApiRecorder
}

// Recorder for MockUserManagementApi (not exported)
type _MockUserManagementApiRecorder struct {
	mock *MockUserManagementApi
}

func NewMockUserManagementApi(ctrl *gomock.Controller) *MockUserManagementApi {
	mock := &MockUserManagementApi{ctrl: ctrl}
	mock.recorder = &_MockUserManagementApiRecorder{mock}
	return mock
}

func (_m *MockUserManagementApi) EXPECT() *_MockUserManagementApiRecorder {
	return _m.recorder
}

func (_m *MockUserManagementApi) InviteUser(email string) (*InvitationResponse, int, error) {
	ret := _m.ctrl.Call(_m, "InviteUser", email)
	ret0, _ := ret[0].(*InvitationResponse)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUserManagementApiRecorder) InviteUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InviteUser", arg0)
}

func (_m *MockUserManagementApi) ResendUserInvitation(email string) (int, error) {
	ret := _m.ctrl.Call(_m, "ResendUserInvitation", email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserManagementApiRecorder) ResendUserInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResendUserInvitation", arg0)
}

func (_m *MockUserManagementApi) ChangeCurrentUserPassword(changePasswdReq ChangePasswordRequest) (int, error) {
	ret := _m.ctrl.Call(_m, "ChangeCurrentUserPassword", changePasswdReq)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserManagementApiRecorder) ChangeCurrentUserPassword(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangeCurrentUserPassword", arg0)
}

func (_m *MockUserManagementApi) DeleteUser(email string) (int, error) {
	ret := _m.ctrl.Call(_m, "DeleteUser", email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserManagementApiRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUser", arg0)
}

func (_m *MockUserManagementApi) GetInvitations() ([]string, int, error) {
	ret := _m.ctrl.Call(_m, "GetInvitations")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUserManagementApiRecorder) GetInvitations() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInvitations")
}

func (_m *MockUserManagementApi) GetUsers() ([]UaaUser, int, error) {
	ret := _m.ctrl.Call(_m, "GetUsers")
	ret0, _ := ret[0].([]UaaUser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockUserManagementApiRecorder) GetUsers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsers")
}

func (_m *MockUserManagementApi) DeleteUserInvitation(email string) (int, error) {
	ret := _m.ctrl.Call(_m, "DeleteUserInvitation", email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserManagementApiRecorder) DeleteUserInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUserInvitation", arg0)
}
